/* Define common colors and variables for reuse */
:root {
  --background-color: #000000;
  --text-color: #f0f0f0;
  --accent-color: #00bcd4;
  --control-bg: rgba(0, 0, 0, 0.4);
  --border-color: rgba(255, 255, 255, 0.1);
  --progress-track: rgba(50, 50, 50, 0.5);
  --spinner-border: rgba(255, 255, 255, 0.3);
  --hue: 0; /* This should be the single source of truth */
  --primary: hsl(var(--hue), 70%, 50%);
  --primary-transparent: hsla(var(--hue), 70%, 50%, 0.2);
  --secondary: hsl(var(--hue), 70%, 95%);
  --background: hsl(var(--hue), 30%, 20%);
}

/* Reset margins and paddings */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* Global body */
body {
  background: var(--background-color);
  font-family: Arial, sans-serif;
  color: var(--text-color);
  display: flex;
  justify-content: center;
  align-items: center;
  height: calc(var(--vh, 1vh) * 100);
}

/* Main container */
.container {
  width: 100vw;
  height: calc(var(--vh, 1vh) * 100);
  background: var(--background-color);
  border-radius: 0;
  padding: 0;
  backdrop-filter: blur(10px);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  display: flex;
  flex-direction: column;
}

/* Video wrapper styling */
.video-wrapper {
  position: relative;
  flex: 1;
  height: 100%;
  background: var(--background-color);
  border-radius: 0;
  overflow: hidden;
  z-index: 1;
}

/* Video element styling */
#videoPlayer {
  width: 100%;
  height: 100%;
  display: block;
  object-fit: contain;
}

/* Spinner styling */
.spinner {
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
  z-index: 1000;

  /* New popup-matching styles */
  background: rgba(0, 0, 0, 0.3);
  border: 2px solid rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  backdrop-filter: blur(4px);
  
  /* Adjust border colors to match spinner */
  border-top-color: rgba(255, 255, 255, 0.8);
  border-right-color: rgba(255, 255, 255, 0.5);
  border-bottom-color: rgba(255, 255, 255, 0.3);
  border-left-color: rgba(255, 255, 255, 0.5);
}

/* Spinner animation */
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Optional: Add size variation for different states */
.spinner.large {
  width: 70px;
  height: 70px;
  border-width: 3px;
}

/* Controls styling */
#controls {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: var(--control-bg);
  backdrop-filter: blur(10px);
  border-top: 1px solid var(--border-color);
  padding: 8px 15px;
  display: flex;
  align-items: center;
  border-radius: 0 0 10px 10px;
  z-index: 100;
  transition: all 0.3s ease;
  height: 20px !important;
  opacity: 0.6 !important;
  padding: 4px 8px !important;
}

/* Minimized controls state */
#controls.minimized {
  height: 20px;
  opacity: 0.6;
  padding: 4px 8px;
}

/* Progress container in minimized state */
#controls.minimized .progress-container {
  height: 3px !important;
}

/* Grouped hover/active rules for progress-container */
.progress-container.active,
.progress-container:hover,
#controls:hover .progress-container {
  height: 8px;
}

/* Buffer bar */
.buffer-bar {
  width: 0%;             /* Start with no buffer shown */
  height: 100%;          /* Always match the progress container's height */
  background-color: rgba(175, 175, 175, 0.3);
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
  z-index: 0;
}

/* Progress bar */
.progress-bar {
  position: absolute;
  top: 0;
  left: 0;
  width: 0%;
  height: 100%;
  background-color: var(--primary);
  z-index: 2;
  transition: 
    width 0.2s linear,
    background-color 0.5s ease;
  pointer-events: none;
}

/* Add after existing .progress-bar styles */
.progress-background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
  background-color: transparent;
  border-radius: 2px;
  transition: none; /* Parent container handles transitions */
}

/* Add these keyframes at the top with other animations */
@keyframes popupEnter {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(0) scale(1);
  }
}

@keyframes popupExit {
  from {
    opacity: 1;
    transform: translateX(-50%) translateY(0) scale(1);
  }
  to {
    opacity: 0;
    transform: translateX(-50%) translateY(20px) scale(0.95);
  }
}

@keyframes popupDragPulse {
  0% { transform: translateX(-50%) scale(1); }
  50% { transform: translateX(-50%) scale(1.05); }
  100% { transform: translateX(-50%) scale(1); }
}

/* Updated Material Design Timestamp Popup */
.timestamp-popup.material-popup {
  --popup-elevation: 0 4px 6px rgba(0, 0, 0, 0.1);
  --popup-background: rgba(0, 0, 0, 0.4);
  --popup-text: rgba(255, 255, 255, 0.9);
  
  /* Animation system properties */
  opacity: 0;
  display: none;
  animation-fill-mode: both;
  animation-duration: 0.3s;
  animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  
  /* Rest of existing styles */
  background: var(--popup-background) !important;
  color: var(--popup-text) !important;
  box-shadow: var(--popup-elevation) !important;
  font-family: 'Roboto', sans-serif !important;
  min-width: 120px;
  border-radius: 12px;
  position: absolute;
  bottom: 32px;
  transform: translateX(-50%);
  z-index: 1000;
  padding: 12px 16px;
}

/* Animation states */
.timestamp-popup.visible {
  display: block;
  animation-name: popupEnter;
}

.timestamp-popup.hidden {
  animation-name: popupExit;
}

.timestamp-popup.dragging {
  animation: popupDragPulse 0.3s ease-in-out infinite;
  cursor: grabbing;
}

/* Mini timeline adjustments for dark background */
.mini-timeline {
  background: rgba(255, 255, 255, 0.2);
}

.mini-progress {
  background: rgba(255, 255, 255, 0.9);
}

/* Interaction zones covering the whole video screen */
#interactionZones {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  z-index: 10;
  pointer-events: none;
}

.zone {
  flex: 1;
  pointer-events: auto;
  background: transparent;
}

/* Updated Popup Styling */
.popup {
  display: none !important;
}

/* Notification System */
.notifications-container {
  position: fixed;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 12px;
  z-index: 1000;
  pointer-events: none;
  max-width: 90vw;
  width: max-content;
}

.notification {
  background: rgba(20, 20, 20, 0.95);
  color: white;
  padding: 16px 24px;
  border-radius: 0 0 12px 12px;
  display: flex;
  align-items: center;
  gap: 12px;
  backdrop-filter: blur(8px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
  opacity: 0;
  transform: translateY(-100%);
  transition: 
    opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),
    transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  pointer-events: auto;
  max-width: 400px;
}

.notification.visible {
  opacity: 1;
  transform: translateY(0);
}

.notification.exiting {
  opacity: 0;
  transform: translateY(-100%) scale(0.95);
}

.notification-icon {
  width: 24px;
  height: 24px;
  flex-shrink: 0;
}

.notification-content {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.notification-message {
  font-weight: 500;
  font-size: 14px;
  line-height: 1.4;
}

.notification-timestamp {
  font-size: 12px;
  opacity: 0.7;
}

/* Notification Types */
.notification.info {
  border-left: 4px solid var(--primary-color);
}

.notification.success {
  border-left: 4px solid #4CAF50;
}

.notification.warning {
  border-left: 4px solid #FFC107;
}

.notification.error {
  border-left: 4px solid #F44336;
}

/* Icons */
.notification-icon.info {
  background: var(--primary-color);
  -webkit-mask: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/></svg>');
}

.notification-icon.success {
  background: #4CAF50;
  -webkit-mask: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>');
}

.notification-icon.warning {
  background: #FFC107;
  -webkit-mask: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"/></svg>');
}

.notification-icon.error {
  background: #F44336;
  -webkit-mask: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/></svg>');
}

/* Add scoping class to all UI-related styles */
.ui-component {
  /* All existing styles */
}

/* Example update */
.ui-component .progress-container {
  /* existing progress container styles */
}

.ui-component .notification {
  /* notification styles */
}

/* Updated play/pause animation styles */
.play-pause-animation {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.5);
  width: 120px;
  height: 120px;
  background: rgba(0, 0, 0, 0.4);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  pointer-events: none;
  opacity: 0;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  z-index: 1000;
  color: var(--primary);
  border: 2px solid rgba(255, 255, 255, 0.2);
  padding: 20px;
}

.play-pause-animation.visible {
  opacity: 1;
  transform: translate(-50%, -50%) scale(1);
}

.play-pause-animation svg {
  width: 80px;
  height: 80px;
  fill: currentColor;
  opacity: 0.9;
  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
}

.pause-icon {
  display: none;
}

.play-pause-animation.pause .play-icon {
  display: none;
}

.play-pause-animation.pause .pause-icon {
  display: block;
}

@keyframes pulse {
  0% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.5);
  }
  50% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.1);
  }
  100% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(1.3);
  }
}

.play-pause-animation::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.15);
  animation: pulse 0.6s ease-out forwards;
  z-index: -1;
}

/* Add fastseek animation styles */
.fastseek-indicator {
  position: fixed;
  width: 120px;
  height: 120px;
  pointer-events: none;
  opacity: 0;
  transform: scale(0.5);
  animation: pulse 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(4px);
  background: rgba(0, 0, 0, 0.4);
  border-radius: 50%;
  border: none;
  color: var(--primary-color);
  padding: 20px;
}

.fastseek-indicator svg {
  width: 80px;
  height: 80px;
  fill: currentColor;
  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
}

/* Add zone hover effects */
.zone {
  transition: background-color 0.3s ease;
}

.zone.left-zone:hover {
  background: linear-gradient(90deg, rgba(255,255,255,0.1) 0%, transparent 100%);
}

.zone.right-zone:hover {
  background: linear-gradient(270deg, rgba(255,255,255,0.1) 0%, transparent 100%);
}

/* Update timestamp popup styles */
.timestamp-popup.progress-indicator {
  background: rgba(0, 0, 0, 0.8) !important;
  border: 1px solid hsla(var(--hue), 60%, 50%, 0.4);
  color: white;
  backdrop-filter: blur(8px);
  padding: 8px 16px;
  font-size: 12px;
  line-height: 1.4;
  letter-spacing: 0.5px;
  border-radius: 4px 4px 0 0;
  box-shadow: 0 2px 8px rgba(0,0,0,0.3);
  transform: translateX(-50%) translateY(-6px);
  bottom: 100%;
}

/* Remove old border styles */
.progress-container {
  margin: 10px 0 !important; /* Reduced from 30px */
  border-radius: 2px; /* Match popup's top radius */
}

/* Remove these old popup styles */
.gesture-popup {
  display: none !important;
}

.popup-header {
  /* delete this rule */
}

.time-display {
  /* delete this rule */
}

@keyframes popupAnimation {
  /* delete this keyframe */
}
